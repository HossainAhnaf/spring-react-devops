name: Frontend CI pipeline

on:
  workflow_dispatch:
  # push:
  #   branches: 
  #     - main
  #   paths-ignore:
  #     - '**/*.md'
  #     - '**/*.env'
  # pull_request:
  #   branches: 
  #     - main
  #   paths-ignore:
  #     - '**/*.md'
  #     - '**/*.env'
     
      
jobs:
  test:
    name: Run tests    
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: '16.13.1'
          cache: 'npm'
      
      - name: Install dependencies
        working-directory: ./react-frontend
        run: npm install
      
      - name: Run tests
        working-directory: ./react-frontend
        run: npm run test
  
  lint:
    name: Run linter
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: '16.13.1'
          cache: 'npm'
      
      - name: Install dependencies
        working-directory: ./react-frontend
        run: npm install
      
      - name: Run linter
        working-directory: ./react-frontend
        run: npm run lint:fix
  
  build:
    if: github.event_name == 'push'
    name: Build & Upload Artifact
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: '16.13.1'
      
      - name: Install dependencies
        run: |
          cd ./react-frontend
          npm install
        
      - name: Build
        run: |
          cd ./react-frontend
          npm run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Build Artifact
          path: ./react-frontend/built
  
  docker:
    name: Build , Security Scan & push Docker image
    needs: [test, lint]
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
    outputs:
      image_tag: ${{ steps.set-output.outputs.image_tag }}
      image_tag_short: ${{ steps.set-output.outputs.image_tag_short }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v4

      - name: Set Image Name
        run: echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}   

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
                  
      - name: Build docker image
        uses: docker/build-push-action@v4
        with:
          target: prod
          context: ./react-frontend
          file: ./react-frontend/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          load: true
      
      - name: Set Image tag outputs
        id: set-output
        run: |
          # Extract full image reference with sha- tag
          full_ref=$(echo "$DOCKER_METADATA" | jq -r '.tags[] | select(test(":sha-"))' | head -n 1)

          # Extract just the tag (after the last colon)
          full_tag="${full_ref##*:}"
          echo "SHA Image tag: $full_tag"
      
          # Short tag = first 7 chars of the sha
          short_tag=$(echo "$full_tag" | cut -c5-11)
          echo "Short form: $short_tag"
      
          echo "image_tag=$full_tag" >> "$GITHUB_OUTPUT"
          echo "image_tag_short=$short_tag" >> "$GITHUB_OUTPUT"
                      
      - name: Security Scan
        uses: aquasecurity/trivy-action@0.31.0
        with: 
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-output.outputs.image_tag }}'
          format: 'template'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          vuln-type: 'os,library'
      
      - name: Push docker image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v4
        with:
          target: prod
          context: ./react-frontend
          file: ./react-frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
      
      