name: Backend CI pipeline

on:
  push:
    branches: 
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.env'
  pull_request:
    branches: 
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.env'



jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    services:
      db: 
       image: mysql:8
       env:
         MYSQL_ROOT_PASSWORD: 1
         MYSQL_DATABASE: hobbie_backend_db
       ports:
         - 3306:3306
       
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4.7.1
        with:
          java-version: 11
          distribution: liberica
      
      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -uroot -p1 --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Run tests with Maven
        working-directory: ./spring-backend
        run: mvn test -Dspring.datasource.url=jdbc:mysql://127.0.0.1:3306/hobbie_backend_db?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true&serverTimezone=Europe/Paris

  lint:
    name: Run linter
    runs-on: ubuntu-latest
    if: github.event_name == 'push lal'
    steps:
      - uses: actions/checkout@v4
      
      - name: Super Linter
        uses: super-linter/super-linter@v7.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  
  build:
    if: github.event_name == 'push'
    name: Build & Upload Artifact
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4.7.1
        with:
          java-version: 11

      - name: Build with maven
        run: mvn package
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Build Artifact
          path: ./spring-backend/target
  
  docker:
    name: Build , Security Scan & push Docker image
    needs: [test, lint]
    runs-on: ubuntu-latest
    env: 
      REGISTRY: ghcr.io
    outputs:
      image_tag: ${{ steps.set-output.outputs.image_tag }}
      image_tag_short: ${{ steps.set-output.outputs.image_tag_short }}
    steps:
      - uses: actions/checkout@v4

      - name: Set Image Name
        run: echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}   

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
                  
      - name: Build docker image
        uses: docker/build-push-action@v4
        with:
          target: prod
          context: ./spring-backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set Image tag outputs
        id: set-output
        run: |
          # Extract full image reference with sha- tag
          full_ref=$(echo "$DOCKER_METADATA" | jq -r '.tags[] | select(test(":sha-"))' | head -n 1)

          # Extract just the tag (after the last colon)
          full_tag="${full_ref##*:}"
          echo "SHA Image tag: $full_tag"
      
          # Short tag = first 7 chars of the sha
          short_tag=$(echo "$full_tag" | cut -c5-11)
          echo "Short form: $short_tag"
      
          echo "image_tag=$full_tag" >> "$GITHUB_OUTPUT"
          echo "image_tag_short=$short_tag" >> "$GITHUB_OUTPUT" 

      - name: Security Scan
        uses: aquasecurity/trivy-action@0.31.0
        with: 
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-output.outputs.image_tag }}'
          format: 'template'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          vuln-type: 'os,library'
      
      - name: Push docker image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v4
        with:
          target: prod
          context: ./spring-backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}      
